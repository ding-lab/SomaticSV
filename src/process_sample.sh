#/bin/bash
# Run Manta SV caller and filter
# Usage: process_sample.sh [options] tumor.bam normal.bam reference.fa 
# 
# Options [ defaults ]:
# -v : verbose output
# -d : Dry run - output commands but do not execute them
# -o out_dir : Output directory [ ./output ]
# -c cpu : CPU count [ 4 ]
# -f output.vcf : specify output filename in manta results dir [ final.SV.WGS.vcf ]
# -C CONFIG_ARGS : pass CONFIG_ARGS to configManta.py
# -R RUN_ARGS : pass CONFIG_ARGS to runWorkflow.py

# Previously, -T option turned on the following arguments, 
# useful for testing with COST16011 test dataset
# Obtained from failed run of 
#	python /opt/conda/share/manta-1.4.0-1/bin/runMantaWorkflowDemo.py
# Test run succeeds without these args, but takes longer to run
# TESTARGS=" --region=8:107652000-107655000 --region=11:94974000-94989000 --candidateBins=4 --exome "
# Pass as, -X "$TESTARGS"


# In MGI environments, it is necessary to call python and find manta explicitly
# /usr/bin/python /opt/conda/bin/configManta.py
# This should generally work for the docker image
PYTHON="/usr/bin/python"
MANTAD="/opt/conda/bin"

#export PYTHONPATH="$PYTHONPATH:/opt/conda/lib/python2.7/site-packages"

# Set defaults
OUTD="./output"
OUTVCF="final.SV.WGS.vcf"
CPU="4"

## Load the conda environment. this is done in Dockerfile
#if [ -z "$CONDA_DEFAULT_ENV" ]; then
#    source /opt/conda/bin/activate base
#fi


# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":vdo:c:f:C:R:" opt; do
  case $opt in
    v)  # binary argument
      VERBOSE=1
      >&2 echo "Verbose output"
      ;;
    d)  # binary argument
      DRYRUN=1
      ;;
    o) # value argument
      OUTD=$OPTARG
      >&2 echo "Output directory: $OUTD "
      ;;
    c) # value argument
      CPU=$OPTARG
      >&2 echo "CPU: $CPU "
      ;;
    f) # value argument
      OUTVCF=$OPTARG
      >&2 echo "Output VCF filename: $OUTVCF "
      ;;
    C) # value argument
      CONFIG_ARGS="$OPTARG"
    >&2 echo DEBUG: CONFIG_ARGS = $CONFIG_ARGS
      ;;
    R) # value argument
      RUN_ARGS="$OPTARG"
      ;;
    \?)
      >&2 echo "Invalid option: -$OPTARG"
      exit 1
      ;;
    :)
      >&2 echo "Option -$OPTARG requires an argument."
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

function test_exit_status {
    # Evaluate return value for chain of pipes; see https://stackoverflow.com/questions/90418/exit-shell-script-based-on-process-exit-code
    rcs=${PIPESTATUS[*]};
    for rc in ${rcs}; do
        if [[ $rc != 0 ]]; then
            >&2 echo Fatal error.  Exiting.
            exit $rc;
        fi;
    done
}

if [ "$#" -ne 3 ]; then
    >&2 echo Error: Wrong number of arguments
    exit 1
fi

TUMOR=$1
NORMAL=$2
REF=$3

# uncompress REF if necessary.  This would typically be used just for test data
if [[ ! -e $REF && -e "$REF.tar.bz2" ]]; then
    echo Uncompressing "$REF.tar.bz2"
    D=$(dirname $REF)
    tar -xvjf "$REF.tar.bz2" -C $D
fi


if [ ! -e $TUMOR ]; then
    >&2 echo Error: tumor does not exist: $TUMOR
    exit 1
fi
if [ ! -e $NORMAL ]; then
    >&2 echo Error: normal does not exist: $NORMAL
    exit 1
fi
if [ ! -e $REF ]; then
    >&2 echo Error: reference does not exist: $REF
    exit 1
fi

# First configure manta
CMD="$PYTHON $MANTAD/configManta.py --tumorBam $TUMOR --normalBam $NORMAL --referenceFasta $REF --runDir $OUTD $CONFIG_ARGS"
if [ "$DRYRUN" ]; then
	>&2 echo Dryrun: $CMD
else
	>&2 echo Running: $CMD
	eval $CMD
	test_exit_status
	>&2 echo configManta.py success.
fi

# now run manta
CMD="$PYTHON $OUTD/runWorkflow.py -m local -j $CPU $RUN_ARGS"
if [ "$DRYRUN" ]; then
	>&2 echo Dryrun: $CMD
else
	>&2 echo Running: $CMD
	eval $CMD
	test_exit_status
	>&2 echo runWorkflow.py success.
fi

# VCF below is generated by manta
VCF="$OUTD/results/variants/somaticSV.vcf.gz"
# We place output file in the same directory as manta output
OVCF="$OUTD/results/variants/$OUTVCF"

CMD="$PYTHON /usr/local/somatic_sv_workflow/src/filter_vcf.py $VCF $OVCF"
if [ "$DRYRUN" ]; then
	>&2 echo Dryrun: $CMD
else
	>&2 echo Running: $CMD
	eval $CMD
	test_exit_status
	>&2 echo filter_vcf.py success.
fi

>&2 echo Written to $OVCF
>&2 echo process_sample.sh success.
